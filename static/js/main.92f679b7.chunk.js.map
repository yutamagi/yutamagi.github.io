{"version":3,"sources":["components/Cockpit/Cockpit.module.css","containers/App.module.css","components/Persons/Person/Person.module.css","components/Persons/Person/Person.js","components/Persons/Persons.js","components/Cockpit/Cockpit.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Person","props","console","log","className","classes","onClick","click","name","age","children","type","onChange","changed","value","Persons","persons","map","person","index","clicked","key","id","event","Cockpit","useEffect","timer","setTimeout","alert","clearTimeout","assignedClasses","btnClass","showPersons","Red","length","push","red","bold","appTitle","join","App","state","otherState","showCockpit","nameChangedHandler","personIndex","findIndex","p","target","setState","deletePersonHandler","splice","togglePersonsHandler","doesShow","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92f679b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"Cockpit_red__qazYK\",\"bold\":\"Cockpit_bold__23vCf\",\"Cockpit\":\"Cockpit_Cockpit__1Nqo4\",\"Red\":\"Cockpit_Red__nDSl4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3w5dQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__oZHNw\"};","import React from 'react';\nimport classes from './Person.module.css';\n\nconst Person = (props) => {\n  console.log('[Person.js] rendering...');\n    return (\n        <div className={classes.Person}>\n            <p onClick={props.click}>I'm {props.name} and I am {props.age} years old!</p>\n            <p>{props.children}</p>\n            <input type=\"text\" onChange={props.changed} value={props.name} />\n        </div>\n    );\n}\n\nexport default Person;","import React from 'react';\r\nimport Person from './Person/Person'\r\n\r\nconst Persons = (props) => {\r\n  console.log('[Persons.js] rendering...');\r\n  return props.persons.map((person, index) => {\r\n    return (\r\n      <Person\r\n        click={() => props.clicked(index)}\r\n        name={person.name}\r\n        age={person.age}\r\n        key={person.id}\r\n        changed={(event) => props.changed(event, person.id)}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nexport default Persons;","import React, { useEffect } from 'react';\r\nimport classes from './Cockpit.module.css';\r\n\r\nconst Cockpit = (props) => {\r\n    useEffect(() => {\r\n        console.log('[Cockpit.js] useEffect');\r\n        const timer = setTimeout(() => {\r\n            alert('Welcome to my page!');\r\n        }, 1000);\r\n        return () => {\r\n            clearTimeout(timer);\r\n        }\r\n    }, []);\r\n\r\n    const assignedClasses = [];\r\n    let btnClass = '';\r\n    if (props.showPersons) {\r\n        btnClass = classes.Red;\r\n    }\r\n\r\n    if (props.persons.length <= 2) {\r\n      assignedClasses.push(classes.red);\r\n    }\r\n    if (props.persons.length <= 1) {\r\n      assignedClasses.push(classes.bold); \r\n    }\r\n\r\n    return (\r\n        <div className={classes.Cockpit}>\r\n            <h1>{props.appTitle}</h1>\r\n            <p className={assignedClasses.join(' ')}> this is really working!!</p>\r\n            <button\r\n                className={btnClass}\r\n                onClick={props.clicked}>\r\n            Toggle Persons\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cockpit;","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport Person from '../components/Persons/Person/Person';\nimport Persons from '../components/Persons/Persons'\nimport Cockpit from '../components/Cockpit/Cockpit';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    console.log('[App.js] constructor');\n  }\n  \n  state = {\n    persons: [\n      {id: \"001\", name: 'Max', age: 28 },\n      {id: \"002\", name: 'Manu', age: 29 },\n      {id: \"003\", name: 'Stephanie', age: 26 }\n    ],\n    otherState: 'some other value',\n    showPersons: false,\n    showCockpit: true\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log('[App.js] getDerivedStateFromProps', props);\n    return state;\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState({persons: persons})\n  }\n\n  deletePersonHandler = (personIndex) => {\n    // const persons = this.state.persons;\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({persons: persons});\n  }\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  }\n\n  render() {\n    console.log('[App.js] render');\n\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = \n          <Persons\n            persons={this.state.persons}\n            clicked={this.deletePersonHandler}\n            changed={this.nameChangedHandler} />; \n    }\n\n    return (\n      <div className={classes.App} >\n        <button onClick={() => this.setState({showCockpit: false})}>\n          Remove Cockpit\n        </button>\n        {this.state.showCockpit ? (\n          <Cockpit appTitle={this.props.appTitle}\n            showPersons={this.state.showPersons}\n            persons={this.state.persons}\n            clicked={this.togglePersonsHandler} />\n        ) : null}\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App appTitle=\"Person Manager\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}